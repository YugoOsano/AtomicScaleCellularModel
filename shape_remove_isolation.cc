// shape_remove_isolation.cc

// 空間中に取り残された固体部分を
// 塗りつぶしのアルゴリズムを用いて取り除く。
// http://lee.phys.titech.ac.jp/~yasutake/PaintArea.html
// を参照。（従来の方法。高速手法は使用しない）

/*
  2. まず塗りつぶしを始める一点 ( X, Y ) を決める
  3. その座標 X, Y をスタックに積む
  4. スタックから座標 X , Y を取り出す
  5. ( X, Y )から左に１ピクセルずつ調べ、
  初めて境界のピクセルになる１個前のｘ座標 Xleft を取る
  
  6. 同様に( X, Y )から右に１ピクセルずつ調べ、
  右の境界の１ピクセル前のｘ座標 Xright を取る
  7. ( Xleft, Y-1 )から( Xright, Y-1 )まで１ピクセルずつ調べる。
  この区間には境界線が含まれる 可能性がある。境界線が含まれていた場合、
  領域の内部から境界のピクセルに入る直前のピクセルの座標 ( Xin, Y-1 ) 
  をスタックに積む。この区間には複数の Xin が含まれている可能性があるが、
  それらの座標を全てスタックに積む。
  8. ６と同様にして、( Xleft, Y+1 )から( Xright, Y+1 )まで
  １ピクセルずつ調べ、見つかった全ての( Xin, y+1 )をスタックに積んでいく
  9. スタックが空になるまで、３に戻って処理を続ける 

*/
#include "shape_trim.h"

// -- 入力：開始点の (X, Y) / 塗りつぶし点の最大値

void Shape_trim_class::paint_fill(int start_point_x, int start_point_y,
				  int n_maxpoint )
{
  
}
